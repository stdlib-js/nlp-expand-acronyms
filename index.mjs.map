{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils-keys';\nimport isUppercase from '@stdlib/assert-is-uppercase';\nimport lowercase from '@stdlib/string-lowercase';\nimport tokenize from '@stdlib/nlp-tokenize';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport ACRONYMS from './acronyms.json';\n\n\n// VARIABLES //\n\nvar KEYS = objectKeys( ACRONYMS );\n\n\n// MAIN //\n\n/**\n* Expands acronyms in a string.\n*\n* @param {string} str - string to convert\n* @throws {TypeError} must provide a string\n* @returns {string} string with expanded acronyms\n*\n* @example\n* var str = 'LOL, this is fun. I am ROFL.';\n* var out = expandAcronyms( str );\n* // returns 'laughing out loud, this is fun. I am rolling on the floor laughing.'\n*\n* @example\n* var str = 'brb, I need to check my mail. thx!';\n* var out = expandAcronyms( str );\n* // returns 'be right back, I need to check my mail. thanks!'\n*/\nfunction expandAcronyms( str ) {\n\tvar tokens;\n\tvar token;\n\tvar out;\n\tvar key;\n\tvar i;\n\tvar j;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '1dh3B', str ) );\n\t}\n\tout = '';\n\ttokens = tokenize( str, true );\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isUppercase( token ) ) {\n\t\t\tfor ( j = 0; j < KEYS.length; j++ ) {\n\t\t\t\tkey = KEYS[ j ];\n\t\t\t\tif ( lowercase( token ) === key ) {\n\t\t\t\t\ttoken = ACRONYMS[ key ];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( j = 0; j < KEYS.length; j++ ) {\n\t\t\t\tkey = KEYS[ j ];\n\t\t\t\tif ( token === key ) {\n\t\t\t\t\ttoken = ACRONYMS[ key ];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout += token;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default expandAcronyms;\n"],"names":["KEYS","objectKeys","ACRONYMS","expandAcronyms","str","tokens","token","out","key","i","j","isString","TypeError","format","tokenize","length","isUppercase","lowercase"],"mappings":";;m9EAiCIA,EAAOC,EAAYC,GAsBvB,SAASC,EAAgBC,GACxB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAUP,GACf,MAAM,IAAIQ,UAAWC,EAAQ,QAAST,IAIvC,IAFAG,EAAM,GACNF,EAASS,EAAUV,GAAK,GAClBK,EAAI,EAAGA,EAAIJ,EAAOU,OAAQN,IAAM,CAErC,GADAH,EAAQD,EAAQI,GACXO,EAAaV,IACjB,IAAMI,EAAI,EAAGA,EAAIV,EAAKe,OAAQL,IAE7B,GADAF,EAAMR,EAAMU,GACPO,EAAWX,KAAYE,EAAM,CACjCF,EAAQJ,EAAUM,GAClB,KACA,OAGF,IAAME,EAAI,EAAGA,EAAIV,EAAKe,OAAQL,IAE7B,GAAKJ,KADLE,EAAMR,EAAMU,IACS,CACpBJ,EAAQJ,EAAUM,GAClB,KACA,CAGHD,GAAOD,CACP,CACD,OAAOC,CACR"}